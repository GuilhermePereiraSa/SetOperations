Estruturas de dados

    Nesse projeto, o TAD CONJUNTO foi implementado a partir de dois TADs diferentes, estando a critério do usuário qual deles
empregar. Visando minimizar a complexidade computacional, as estruturas de dados escolhidas foram as árvores AVL e Rubro-Negra, 
ambas árvores binárias de busca balanceadas.
    A estrutura de árvore é vantajosa na implementação do TAD devido à sua eficiência em operações de busca, inserção e remoção
de elementos. Estas, por sua vez, são essenciais para operações envolvendo conjuntos, a exemplo de consultas e modificações,
como união, interseção e diferença. 
    Em particular, estruturas balanceadas garantem a preservação da eficiência das operações de busca, inserção e remoção, que
ocorrem em tempo O(log(n)). Isso porque, em diversos cenários, árvores binárias simples podem degenerar para uma lista ligada,
o que degradaria esse tempo para O(n).
    Nas árvores AVL (Adelson-Velsky and Landis), a diferença máxima de altura entre as subárvores esquerda e direita de um nó é 
de, no máximo, 1. Devido a esse balanceamento quase perfeito, a operação de busca fica ligeiramente mais veloz. Por outro lado,
alterações como inserções e remoções ficam mais custosas, uma vez que, frequentemente, são necessárias reestruturações e 
rotações na árvore para manter o balanceamento estrito após essas operações.
    Nesse sentido, as árvores Rubro-Negras permitem um balanceamento mais flexível quando comparadas às AVL, de modo que a altura
das árvores possa diferir por um fator maior (até o dobro). Assim, inserções e remoções costumam ser mais velozes, já que há 
menor necessidade de rebalancear a árvore. Além disso, apesar de a busca ser marginalmente mais lenta que em AVL, ainda opera 
em O(log(n)), sendo eficiente para a maioria das aplicações.
    Para o TAD de conjunto, as operações de inserção e remoção são tão importantes quanto a busca, pois frequentemente são 
executadas múltiplas vezes durante as operações que manipulam conjuntos, como união, interseção e diferença. A árvore Rubro-Negra 
foi escolhida como estrutura subjacente devido ao seu melhor desempenho médio para inserções e remoções, tornando-a mais eficiente 
para as operações de conjunto. Embora a AVL tenha uma leve vantagem em buscas isoladas, a menor sobrecarga de balanceamento da 
Rubro-Negra torna-a ideal para um conjunto onde todas as operações precisam ser equilibradas em termos de custo.

Complexidade Computacional

-Criar conjunto (criar_set)
    Não há loops nem operações recursivas. Assim, a complexidade computacional é O(1). 

-Apagar conjunto (set_apagar)
    Em ambas as árvores, uma função recursiva irá ser chamada uma única vez para cada um dos n nós, liberando seu espaço. Portanto, 
a complexidade será de O(n).

-Inserir elemento (set_inserir)
    Para a árvore AVL, o algoritmo percorre a árvore até encontrar a posição de inserção, operação que no pior caso terá complexidade
O(log2 n), derivado da própria altura da árvore. Após inserir o nó, pode ser necessário rebalancear a árvore após a inserção, o que 
pode levar até O(log2 n) rotações. Com isso, a complexidade final é dada por O(log2 n).
    Já para a árvore Rubro-Negra, a busca pelo local de inserção também tem complexidade O(log2 n). Além disso, são necessários no 
máximo 2 rotações e O(log2 n) recolorações, de modo que a complexidade final também é O(log2 n). Ainda assim, recolorações são muito 
mais rápidas do que rotações, tornando a Rubro-Negra mais eficiente nessa operação.

-Remover elemento
    De forma similar, a remoção exige a busca do elemento a ser removido e, caso necessário, rebalanceamento após a remoção (rotações 
e/ou recolorações). Assim, a complexidade da operação também é de O(log2 n).

-Imprimir conjunto
    Para a impressão, uma função recursiva passa por cada nó da árvore uma única vez e imprime na tela o valor armazenado. Então, a 
complexidade final é de O(n).

-Pertence
    A operação percorre a árvore buscando determinada chave. Para a árvore AVL, a complexidade é de O(1,44*log2 n) = O(log2 n), já 
para a Rubro-Negra, O(2*log2 n) = O(log2 n).

-União
    Para 2 conjuntos com m e n elementos, uma função recursiva percorre cada conjunto in-order (O(m) e O(n)) e insere elementos únicos
em um conjunto temporário. Em cada recursão, é avaliado se o elemento já pertence ao conjunto temporário e, caso não pertença, a 
inserção no conjunto tem complexidade O(log2 m) e O(log2 (m + n)). Com isso, a complexidade final é O(m*log2 m) + O(n*log2 (m + n)).

-Intersecção
    Para 2 conjuntos com m e n elementos, o primeiro conjunto é percorrido in-order de maneira similar à anterior. Para cada um dos m
elementos, é feito uma busca no segundo conjunto, de modo que a complexidade da operação é O(m*log2 n).

    

